// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract QRCodePayment {
    address public owner;
    mapping(address => uint256) public balances;

    event FundsLoaded(address indexed user, uint256 amount);
    event PaymentMade(address indexed user, uint256 amount, string qrCode);

    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the owner");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function loadFunds() external payable {
        require(msg.value > 0, "Amount must be greater than 0");
        balances[msg.sender] += msg.value;
        emit FundsLoaded(msg.sender, msg.value);
    }

    function checkBalance() external view returns (uint256) {
        return balances[msg.sender];
    }

    function makePayment(uint256 amount, string memory qrCode) external {
        require(amount > 0, "Amount must be greater than 0");
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        emit PaymentMade(msg.sender, amount, qrCode);
    }

    function withdrawFunds(uint256 amount) external onlyOwner {
        require(amount <= address(this).balance, "Insufficient contract balance");
        payable(owner).transfer(amount);
    }

    receive() external payable {
        revert("QRCodePayment contract does not accept direct payments");
    }
}
